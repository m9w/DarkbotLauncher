diff --git a/src/main/java/com/github/manolo8/darkbot/backpage/HangarManager.java b/src/main/java/com/github/manolo8/darkbot/backpage/HangarManager.java
index 6b7a2486..9c454427 100644
--- a/src/main/java/com/github/manolo8/darkbot/backpage/HangarManager.java
+++ b/src/main/java/com/github/manolo8/darkbot/backpage/HangarManager.java
@@ -11,13 +11,14 @@ import com.github.manolo8.darkbot.utils.Base64Utils;
 import com.github.manolo8.darkbot.utils.Time;
 import com.google.gson.Gson;
 import com.google.gson.JsonObject;
+import eu.darkbot.api.managers.HangarAPI;
 
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.util.List;
 
-public class HangarManager implements Tickable {
+public class HangarManager implements Tickable, HangarAPI {
     private final Gson gson;
 
     @Deprecated
@@ -109,7 +110,7 @@ public class HangarManager implements Tickable {
         this.updateHangarListEvery = millis;
     }
 
-    public void updateCurrentHangar() throws Exception {
+    public void updateCurrentHangar() {
         if (hangarList == null) updateHangarList();
 
         for (Hangar hangar : hangarList.getData().getRet().getHangars())
@@ -119,11 +120,11 @@ public class HangarManager implements Tickable {
             }
     }
 
-    public void updateHangarList() throws Exception {
+    public void updateHangarList() {
         this.hangarList = deserializeHangar(getInputStream("getHangarList", new JsonObject()));
     }
 
-    public HangarResponse getHangarResponseById(int hangarId) throws Exception {
+    public HangarResponse getHangarResponseById(int hangarId) {
         JsonObject paramObj = new JsonObject();
         JsonObject hangarObj = new JsonObject();
 
@@ -133,18 +134,18 @@ public class HangarManager implements Tickable {
         return deserializeHangar(getInputStream("getHangar", paramObj));
     }
 
-    public InputStream getInputStream(String action, JsonObject json) throws IOException {
+    public InputStream getInputStream(String action, JsonObject json) { try {
         return backpage.postHttp("flashAPI/inventory.php")
                 .setRawParam("action", action)
                 .setParam("params", Base64Utils.encode(json.toString()))
                 .getInputStream();
-    }
+    } catch (IOException e) { throw new RuntimeException(e); } }
 
-    private HangarResponse deserializeHangar(InputStream in) throws Exception {
+    private HangarResponse deserializeHangar(InputStream in) {
         HangarResponse hangar;
         try (var reader = new InputStreamReader(Base64Utils.decodeStream(in))) {
             hangar = gson.fromJson(reader, HangarResponse.class);
-        }
+        } catch (IOException e) { throw new RuntimeException(e); }
 
         if (hangar.getData().map != null) {
             String[] lootIds = hangar.getData().map.get("lootIds");
