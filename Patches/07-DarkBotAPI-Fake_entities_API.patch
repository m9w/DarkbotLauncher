diff --git a/api/src/main/java/eu/darkbot/api/game/entities/FakeEntity.java b/api/src/main/java/eu/darkbot/api/game/entities/FakeEntity.java
new file mode 100644
index 0000000..b7aab77
--- /dev/null
+++ b/api/src/main/java/eu/darkbot/api/game/entities/FakeEntity.java
@@ -0,0 +1,58 @@
+package eu.darkbot.api.game.entities;
+
+import eu.darkbot.api.game.other.Location;
+
+/**
+ * Fake entities help to keep virtual entities on a map that placed out of visibility range.
+ * It should use when need to assist or predict position these entities for active module.
+ * Cases of use: keeping mine locations for choose a better path and prevent releasing it,
+ *               keeping box locations that should be collected after more prefer tasks.
+ */
+public interface FakeEntity extends Entity {
+
+    static boolean isFakeEntity(Entity entity) {
+        return entity instanceof FakeEntity;
+    }
+
+    /**
+     * Set timeout lifetime of a fake object in ms
+     */
+    void setTimeout(long keepAlive);
+
+    /**
+     * Set the minimum distance to a hero when an entity will be removed
+     */
+    void setRemoveDistance(long removeDistance);
+
+    /**
+     * Fake box is a target for colector module if more prefer boxes is absent
+     */
+    interface FakeBox extends Box, FakeEntity {
+
+        /**
+         * Is remove fake entity after attempt select it
+         */
+        void setRemoveWhenAttemptSelect(boolean removeWhenAttemptSelect);
+    }
+
+    /**
+     * Fake mine is an obstacle that counted by path builder
+     */
+    interface FakeMine extends Mine, FakeEntity {}
+
+    /**
+     * Fake ship. It can be NPS, player or pet.
+     */
+    interface FakeShip extends Ship, FakeEntity {
+
+        /**
+         * Is remove fake entity after attempt select it
+         */
+        void setRemoveWhenAttemptSelect(boolean removeWhenAttemptSelect);
+
+        /**
+         * Update location of ship
+         */
+        void setLocation(Location location);
+    }
+}
diff --git a/api/src/main/java/eu/darkbot/api/managers/EntitiesAPI.java b/api/src/main/java/eu/darkbot/api/managers/EntitiesAPI.java
index 5131352..11fc89c 100644
--- a/api/src/main/java/eu/darkbot/api/managers/EntitiesAPI.java
+++ b/api/src/main/java/eu/darkbot/api/managers/EntitiesAPI.java
@@ -6,6 +6,7 @@ import eu.darkbot.api.game.entities.Barrier;
 import eu.darkbot.api.game.entities.BattleStation;
 import eu.darkbot.api.game.entities.Box;
 import eu.darkbot.api.game.entities.Entity;
+import eu.darkbot.api.game.entities.FakeEntity;
 import eu.darkbot.api.game.entities.Mine;
 import eu.darkbot.api.game.entities.Mist;
 import eu.darkbot.api.game.entities.Npc;
@@ -18,6 +19,7 @@ import eu.darkbot.api.game.entities.Ship;
 import eu.darkbot.api.game.entities.SpaceBall;
 import eu.darkbot.api.game.entities.StaticEntity;
 import eu.darkbot.api.game.entities.Station;
+import eu.darkbot.api.game.other.Location;
 import eu.darkbot.api.game.other.Obstacle;
 import org.jetbrains.annotations.UnmodifiableView;
 
@@ -164,6 +166,21 @@ public interface EntitiesAPI extends API.Singleton {
     @UnmodifiableView
     Collection<? extends Entity> getAll();
 
+    /**
+     * Creating a fake mine on a map that will be counted by pathfinder
+     */
+    FakeEntity.FakeMine createFakeMine(int typeId, Location loc, long removeDistance, long keepAlive);
+
+    /**
+     * Creating a fake box on a map
+     */
+    FakeEntity.FakeBox createFakeBox(String boxName, Location loc, long removeDistance, long keepAlive, boolean removeIfAttemptSelect);
+
+    /**
+     * Creating a fake NPC on a map
+     */
+    FakeEntity.FakeShip createFakeNpc(String npcName, Location loc, long removeDistance, long keepAlive, boolean removeIfAttemptSelect);
+
     /**
      * Base entity event triggered whenever any entity is added or removed.
      * To listen only for creation or removal, use the more specific events:
